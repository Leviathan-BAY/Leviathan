version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: leviathan-postgres
    environment:
      POSTGRES_USER: leviathan
      POSTGRES_PASSWORD: dev_password
      POSTGRES_DB: leviathan_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U leviathan"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: leviathan-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API (development)
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
    container_name: leviathan-backend
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://leviathan:dev_password@postgres:5432/leviathan_db
      REDIS_URL: redis://redis:6379
      FRONTEND_URL: http://localhost:3000
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./backend/src
          target: /app/src

  # Frontend Web App (development)
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile.dev
    container_name: leviathan-frontend
    ports:
      - "3000:3000"
    environment:
      VITE_API_URL: http://localhost:3001/api
      VITE_SUI_NETWORK: testnet
    volumes:
      - ./frontend:/app
      - /app/node_modules
    develop:
      watch:
        - action: sync
          path: ./frontend/src
          target: /app/src

volumes:
  postgres_data:
  redis_data: